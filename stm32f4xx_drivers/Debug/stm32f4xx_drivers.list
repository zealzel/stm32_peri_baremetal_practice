
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001160  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001308  08001308  00011308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800137c  0800137c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800137c  0800137c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800137c  0800137c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800137c  0800137c  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001380  08001380  00011380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000030  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001198  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004af  00000000  00000000  0002122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  000216e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000140  00000000  00000000  00021868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f9e  00000000  00000000  000219a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bfd  00000000  00000000  00024946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a832  00000000  00000000  00026543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00030d75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000be4  00000000  00000000  00030dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080012f0 	.word	0x080012f0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	080012f0 	.word	0x080012f0

080001e8 <delay>:
#include "stm32f407xx.h"
#include <stdio.h>
#include "stm32f407xx_gpio_driver.h"

void delay(void) {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
    for (uint32_t i = 0; i < 500000/2; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
    }
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <main>:

int main(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
    GPIO_Handle_t GpioLed, GpioBtn;

    GpioLed.pGPIOx = GPIOA;
 800021a:	4b1e      	ldr	r3, [pc, #120]	; (8000294 <main+0x80>)
 800021c:	60fb      	str	r3, [r7, #12]
    GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 800021e:	2308      	movs	r3, #8
 8000220:	743b      	strb	r3, [r7, #16]
    GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000222:	2301      	movs	r3, #1
 8000224:	747b      	strb	r3, [r7, #17]
    GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000226:	2302      	movs	r3, #2
 8000228:	74bb      	strb	r3, [r7, #18]
    GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022a:	2300      	movs	r3, #0
 800022c:	753b      	strb	r3, [r7, #20]
    GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022e:	2300      	movs	r3, #0
 8000230:	74fb      	strb	r3, [r7, #19]

    GPIO_PeriClockControl(GPIOA, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <main+0x80>)
 8000236:	f000 f929 	bl	800048c <GPIO_PeriClockControl>
    GPIO_init(&GpioLed);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fa0c 	bl	800065c <GPIO_init>

    GpioBtn.pGPIOx = GPIOB;
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <main+0x84>)
 8000246:	603b      	str	r3, [r7, #0]
    GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000248:	230c      	movs	r3, #12
 800024a:	713b      	strb	r3, [r7, #4]
    GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800024c:	2300      	movs	r3, #0
 800024e:	717b      	strb	r3, [r7, #5]
    GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000250:	2302      	movs	r3, #2
 8000252:	71bb      	strb	r3, [r7, #6]
    GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 8000254:	2302      	movs	r3, #2
 8000256:	71fb      	strb	r3, [r7, #7]
    GPIO_PeriClockControl(GPIOB, ENABLE);
 8000258:	2101      	movs	r1, #1
 800025a:	480f      	ldr	r0, [pc, #60]	; (8000298 <main+0x84>)
 800025c:	f000 f916 	bl	800048c <GPIO_PeriClockControl>
    GPIO_init(&GpioBtn);
 8000260:	463b      	mov	r3, r7
 8000262:	4618      	mov	r0, r3
 8000264:	f000 f9fa 	bl	800065c <GPIO_init>

    GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_8, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2108      	movs	r1, #8
 800026c:	4809      	ldr	r0, [pc, #36]	; (8000294 <main+0x80>)
 800026e:	f000 fad4 	bl	800081a <GPIO_WriteToOutputPin>
    while (1) {
        if (GPIO_ReadFromInputPin(GPIOB, GPIO_PIN_NO_12) == 1) {
 8000272:	210c      	movs	r1, #12
 8000274:	4808      	ldr	r0, [pc, #32]	; (8000298 <main+0x84>)
 8000276:	f000 faba 	bl	80007ee <GPIO_ReadFromInputPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b01      	cmp	r3, #1
 800027e:	d1f8      	bne.n	8000272 <main+0x5e>
            // handle debouncing
            delay();
 8000280:	f7ff ffb2 	bl	80001e8 <delay>
            printf("Button pressed\n");
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <main+0x88>)
 8000286:	f000 fba3 	bl	80009d0 <puts>
            GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_8);
 800028a:	2108      	movs	r1, #8
 800028c:	4801      	ldr	r0, [pc, #4]	; (8000294 <main+0x80>)
 800028e:	f000 fae9 	bl	8000864 <GPIO_ToggleOutputPin>
        if (GPIO_ReadFromInputPin(GPIOB, GPIO_PIN_NO_12) == 1) {
 8000292:	e7ee      	b.n	8000272 <main+0x5e>
 8000294:	40020000 	.word	0x40020000
 8000298:	40020400 	.word	0x40020400
 800029c:	08001308 	.word	0x08001308

080002a0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <ITM_SendChar+0x48>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <ITM_SendChar+0x48>)
 80002b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002b4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <ITM_SendChar+0x4c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <ITM_SendChar+0x4c>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002c2:	bf00      	nop
 80002c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d0f8      	beq.n	80002c4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000edfc 	.word	0xe000edfc
 80002ec:	e0000e00 	.word	0xe0000e00

080002f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	e00a      	b.n	8000318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000302:	f3af 8000 	nop.w
 8000306:	4601      	mov	r1, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	b2ca      	uxtb	r2, r1
 8000310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	dbf0      	blt.n	8000302 <_read+0x12>
  }

  return len;
 8000320:	687b      	ldr	r3, [r7, #4]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b086      	sub	sp, #24
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	e009      	b.n	8000350 <_write+0x26>
  {
    // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	60ba      	str	r2, [r7, #8]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f7ff ffab 	bl	80002a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf1      	blt.n	800033c <_write+0x12>
  }
  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_close>:

int _close(int file)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800036a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800038a:	605a      	str	r2, [r3, #4]
  return 0;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <_isatty>:

int _isatty(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003a2:	2301      	movs	r3, #1
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
	...

080003cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <_sbrk+0x5c>)
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <_sbrk+0x60>)
 80003d8:	1ad3      	subs	r3, r2, r3
 80003da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003e0:	4b13      	ldr	r3, [pc, #76]	; (8000430 <_sbrk+0x64>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d102      	bne.n	80003ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <_sbrk+0x64>)
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <_sbrk+0x68>)
 80003ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <_sbrk+0x64>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	693a      	ldr	r2, [r7, #16]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d207      	bcs.n	800040c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003fc:	f000 fa48 	bl	8000890 <__errno>
 8000400:	4603      	mov	r3, r0
 8000402:	220c      	movs	r2, #12
 8000404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800040a:	e009      	b.n	8000420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <_sbrk+0x64>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <_sbrk+0x64>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <_sbrk+0x64>)
 800041c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20020000 	.word	0x20020000
 800042c:	00000400 	.word	0x00000400
 8000430:	20000080 	.word	0x20000080
 8000434:	20000098 	.word	0x20000098

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	; (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	; (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	; (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 fa19 	bl	800089c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff fed3 	bl	8000214 <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800047c:	08001384 	.word	0x08001384
  ldr r2, =_sbss
 8000480:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000484:	20000094 	.word	0x20000094

08000488 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>
	...

0800048c <GPIO_PeriClockControl>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t* pGPIOx, uint8_t EnorDi) {
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d162      	bne.n	8000564 <GPIO_PeriClockControl+0xd8>
        if (pGPIOx == GPIOA) {
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a64      	ldr	r2, [pc, #400]	; (8000634 <GPIO_PeriClockControl+0x1a8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x28>
            GPIOA_PCLK_EN();
 80004a6:	4b64      	ldr	r3, [pc, #400]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a63      	ldr	r2, [pc, #396]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
            GPIOH_PCLK_DI();
        } else if (pGPIOx == GPIOI) {
            GPIOI_PCLK_DI();
        }
    }
}
 80004b2:	e0b9      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOB) {
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a61      	ldr	r2, [pc, #388]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 80004bc:	4b5e      	ldr	r3, [pc, #376]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a5d      	ldr	r2, [pc, #372]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f043 0302 	orr.w	r3, r3, #2
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	e0ae      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOC) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a5c      	ldr	r2, [pc, #368]	; (8000640 <GPIO_PeriClockControl+0x1b4>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 80004d2:	4b59      	ldr	r3, [pc, #356]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a58      	ldr	r2, [pc, #352]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004d8:	f043 0304 	orr.w	r3, r3, #4
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004de:	e0a3      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOD) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a58      	ldr	r2, [pc, #352]	; (8000644 <GPIO_PeriClockControl+0x1b8>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 80004e8:	4b53      	ldr	r3, [pc, #332]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a52      	ldr	r2, [pc, #328]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80004ee:	f043 0308 	orr.w	r3, r3, #8
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f4:	e098      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOE) {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a53      	ldr	r2, [pc, #332]	; (8000648 <GPIO_PeriClockControl+0x1bc>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 80004fe:	4b4e      	ldr	r3, [pc, #312]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a4d      	ldr	r2, [pc, #308]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000504:	f043 0310 	orr.w	r3, r3, #16
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050a:	e08d      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOF) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a4f      	ldr	r2, [pc, #316]	; (800064c <GPIO_PeriClockControl+0x1c0>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x96>
            GPIOF_PCLK_EN();
 8000514:	4b48      	ldr	r3, [pc, #288]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a47      	ldr	r2, [pc, #284]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000520:	e082      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOG) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a4a      	ldr	r2, [pc, #296]	; (8000650 <GPIO_PeriClockControl+0x1c4>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0xac>
            GPIOG_PCLK_EN();
 800052a:	4b43      	ldr	r3, [pc, #268]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a42      	ldr	r2, [pc, #264]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000536:	e077      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOH) {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a46      	ldr	r2, [pc, #280]	; (8000654 <GPIO_PeriClockControl+0x1c8>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <GPIO_PeriClockControl+0xc2>
            GPIOH_PCLK_EN();
 8000540:	4b3d      	ldr	r3, [pc, #244]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000544:	4a3c      	ldr	r2, [pc, #240]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054c:	e06c      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOI) {
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a41      	ldr	r2, [pc, #260]	; (8000658 <GPIO_PeriClockControl+0x1cc>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d168      	bne.n	8000628 <GPIO_PeriClockControl+0x19c>
            GPIOI_PCLK_EN();
 8000556:	4b38      	ldr	r3, [pc, #224]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a37      	ldr	r2, [pc, #220]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800055c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000562:	e061      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        if (pGPIOx == GPIOA) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a33      	ldr	r2, [pc, #204]	; (8000634 <GPIO_PeriClockControl+0x1a8>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <GPIO_PeriClockControl+0xee>
            GPIOA_PCLK_DI();
 800056c:	4b32      	ldr	r3, [pc, #200]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000570:	4a31      	ldr	r2, [pc, #196]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000578:	e056      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOB) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a2f      	ldr	r2, [pc, #188]	; (800063c <GPIO_PeriClockControl+0x1b0>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <GPIO_PeriClockControl+0x104>
            GPIOB_PCLK_DI();
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000588:	f023 0302 	bic.w	r3, r3, #2
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800058e:	e04b      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOC) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a2b      	ldr	r2, [pc, #172]	; (8000640 <GPIO_PeriClockControl+0x1b4>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d106      	bne.n	80005a6 <GPIO_PeriClockControl+0x11a>
            GPIOC_PCLK_DI();
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a26      	ldr	r2, [pc, #152]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800059e:	f023 0304 	bic.w	r3, r3, #4
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a4:	e040      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOD) {
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <GPIO_PeriClockControl+0x1b8>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d106      	bne.n	80005bc <GPIO_PeriClockControl+0x130>
            GPIOD_PCLK_DI();
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a21      	ldr	r2, [pc, #132]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005b4:	f023 0308 	bic.w	r3, r3, #8
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ba:	e035      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOE) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a22      	ldr	r2, [pc, #136]	; (8000648 <GPIO_PeriClockControl+0x1bc>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d106      	bne.n	80005d2 <GPIO_PeriClockControl+0x146>
            GPIOE_PCLK_DI();
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005ca:	f023 0310 	bic.w	r3, r3, #16
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d0:	e02a      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOF) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <GPIO_PeriClockControl+0x1c0>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d106      	bne.n	80005e8 <GPIO_PeriClockControl+0x15c>
            GPIOF_PCLK_DI();
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a16      	ldr	r2, [pc, #88]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005e0:	f023 0320 	bic.w	r3, r3, #32
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e6:	e01f      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOG) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <GPIO_PeriClockControl+0x1c4>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d106      	bne.n	80005fe <GPIO_PeriClockControl+0x172>
            GPIOG_PCLK_DI();
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 80005f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fc:	e014      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOH) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a14      	ldr	r2, [pc, #80]	; (8000654 <GPIO_PeriClockControl+0x1c8>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d106      	bne.n	8000614 <GPIO_PeriClockControl+0x188>
            GPIOH_PCLK_DI();
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800060c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000612:	e009      	b.n	8000628 <GPIO_PeriClockControl+0x19c>
        } else if (pGPIOx == GPIOI) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <GPIO_PeriClockControl+0x1cc>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d105      	bne.n	8000628 <GPIO_PeriClockControl+0x19c>
            GPIOI_PCLK_DI();
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	4a05      	ldr	r2, [pc, #20]	; (8000638 <GPIO_PeriClockControl+0x1ac>)
 8000622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000626:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40020000 	.word	0x40020000
 8000638:	40023800 	.word	0x40023800
 800063c:	40020400 	.word	0x40020400
 8000640:	40020800 	.word	0x40020800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40021000 	.word	0x40021000
 800064c:	40021400 	.word	0x40021400
 8000650:	40021800 	.word	0x40021800
 8000654:	40021c00 	.word	0x40021c00
 8000658:	40022000 	.word	0x40022000

0800065c <GPIO_init>:
 *
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_init(GPIO_Handle_t* pGPIOHandle) {
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0; // temp register
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

    // 1. Configure the mode of GPIO pin
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	795b      	ldrb	r3, [r3, #5]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d81e      	bhi.n	80006ae <GPIO_init+0x52>
        // The non interrupt mode
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	795b      	ldrb	r3, [r3, #5]
 8000674:	461a      	mov	r2, r3
                << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000680:	60fb      	str	r3, [r7, #12]
        pGPIOHandle->pGPIOx->MODER &=
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
            ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	4619      	mov	r1, r3
 800068e:	2303      	movs	r3, #3
 8000690:	408b      	lsls	r3, r1
 8000692:	43db      	mvns	r3, r3
 8000694:	4619      	mov	r1, r3
        pGPIOHandle->pGPIOx->MODER &=
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	400a      	ands	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= temp;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	6819      	ldr	r1, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	601a      	str	r2, [r3, #0]
    } else {
        // This part will code later. (Interrupt mode)
    }
    temp = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]

    // 2. Configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	799b      	ldrb	r3, [r3, #6]
 80006b6:	461a      	mov	r2, r3
            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80006c2:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OSPEEDR &=
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689a      	ldr	r2, [r3, #8]
        ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	4619      	mov	r1, r3
 80006d0:	2303      	movs	r3, #3
 80006d2:	408b      	lsls	r3, r1
 80006d4:	43db      	mvns	r3, r3
 80006d6:	4619      	mov	r1, r3
    pGPIOHandle->pGPIOx->OSPEEDR &=
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	400a      	ands	r2, r1
 80006de:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6899      	ldr	r1, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	609a      	str	r2, [r3, #8]
    temp = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]

    // 3. Configure the pupd settings
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	79db      	ldrb	r3, [r3, #7]
 80006f8:	461a      	mov	r2, r3
            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000704:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->PUPDR &=
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	68da      	ldr	r2, [r3, #12]
        ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	4619      	mov	r1, r3
 8000712:	2303      	movs	r3, #3
 8000714:	408b      	lsls	r3, r1
 8000716:	43db      	mvns	r3, r3
 8000718:	4619      	mov	r1, r3
    pGPIOHandle->pGPIOx->PUPDR &=
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	400a      	ands	r2, r1
 8000720:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	68d9      	ldr	r1, [r3, #12]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	430a      	orrs	r2, r1
 8000730:	60da      	str	r2, [r3, #12]
    temp = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]

    // 4. Configure the output type
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7a1b      	ldrb	r3, [r3, #8]
 800073a:	461a      	mov	r2, r3
            << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000744:	60fb      	str	r3, [r7, #12]
    pGPIOHandle->pGPIOx->OTYPER &=
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	685a      	ldr	r2, [r3, #4]
        ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	4619      	mov	r1, r3
 8000752:	2301      	movs	r3, #1
 8000754:	408b      	lsls	r3, r1
 8000756:	43db      	mvns	r3, r3
 8000758:	4619      	mov	r1, r3
    pGPIOHandle->pGPIOx->OTYPER &=
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	400a      	ands	r2, r1
 8000760:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6859      	ldr	r1, [r3, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	430a      	orrs	r2, r1
 8000770:	605a      	str	r2, [r3, #4]
    temp = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
    // 5. Configure the alternate functionality
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d131      	bne.n	80007e2 <GPIO_init+0x186>
        // Configure the alternate function register
        uint8_t temp1, temp2;
        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	72fb      	strb	r3, [r7, #11]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	72bb      	strb	r3, [r7, #10]
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7afa      	ldrb	r2, [r7, #11]
 8000796:	3208      	adds	r2, #8
 8000798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800079c:	7abb      	ldrb	r3, [r7, #10]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	220f      	movs	r2, #15
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	7afa      	ldrb	r2, [r7, #11]
 80007b0:	4001      	ands	r1, r0
 80007b2:	3208      	adds	r2, #8
 80007b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[temp1] |=
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7afa      	ldrb	r2, [r7, #11]
 80007be:	3208      	adds	r2, #8
 80007c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
            (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7a5b      	ldrb	r3, [r3, #9]
 80007c8:	461a      	mov	r2, r3
 80007ca:	7abb      	ldrb	r3, [r7, #10]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
        pGPIOHandle->pGPIOx->AFR[temp1] |=
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	7afa      	ldrb	r2, [r7, #11]
 80007da:	4301      	orrs	r1, r0
 80007dc:	3208      	adds	r2, #8
 80007de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <GPIO_ReadFromInputPin>:
        GPIOI_REG_RESET();
    }
}

/* Data read and write */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber) {
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	70fb      	strb	r3, [r7, #3]
    // Implementation
    uint8_t value;
    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	691a      	ldr	r2, [r3, #16]
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	fa22 f303 	lsr.w	r3, r2, r3
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
    return value;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <GPIO_WriteToOutputPin>:
    value = (uint16_t)pGPIOx->IDR;
    return value;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber,
                           uint8_t Value) {
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	70fb      	strb	r3, [r7, #3]
 8000826:	4613      	mov	r3, r2
 8000828:	70bb      	strb	r3, [r7, #2]
    if (Value == GPIO_PIN_SET) {
 800082a:	78bb      	ldrb	r3, [r7, #2]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d109      	bne.n	8000844 <GPIO_WriteToOutputPin+0x2a>
        // Write 1 to the output data register at the bit field corresponding to
        // the pin number
        pGPIOx->ODR |= (1 << PinNumber);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	78fa      	ldrb	r2, [r7, #3]
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	431a      	orrs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	615a      	str	r2, [r3, #20]
    } else {
        // Write 0
        pGPIOx->ODR &= ~(1 << PinNumber);
    }
}
 8000842:	e009      	b.n	8000858 <GPIO_WriteToOutputPin+0x3e>
        pGPIOx->ODR &= ~(1 << PinNumber);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	78fa      	ldrb	r2, [r7, #3]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	401a      	ands	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	615a      	str	r2, [r3, #20]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t* pGPIOx, uint16_t Value) {
    pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t* pGPIOx, uint8_t PinNumber) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
    pGPIOx->ODR ^= (1 << PinNumber);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	78fa      	ldrb	r2, [r7, #3]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	405a      	eors	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	615a      	str	r2, [r3, #20]
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <__errno>:
 8000890:	4b01      	ldr	r3, [pc, #4]	; (8000898 <__errno+0x8>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000000 	.word	0x20000000

0800089c <__libc_init_array>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	4d0d      	ldr	r5, [pc, #52]	; (80008d4 <__libc_init_array+0x38>)
 80008a0:	4c0d      	ldr	r4, [pc, #52]	; (80008d8 <__libc_init_array+0x3c>)
 80008a2:	1b64      	subs	r4, r4, r5
 80008a4:	10a4      	asrs	r4, r4, #2
 80008a6:	2600      	movs	r6, #0
 80008a8:	42a6      	cmp	r6, r4
 80008aa:	d109      	bne.n	80008c0 <__libc_init_array+0x24>
 80008ac:	4d0b      	ldr	r5, [pc, #44]	; (80008dc <__libc_init_array+0x40>)
 80008ae:	4c0c      	ldr	r4, [pc, #48]	; (80008e0 <__libc_init_array+0x44>)
 80008b0:	f000 fd1e 	bl	80012f0 <_init>
 80008b4:	1b64      	subs	r4, r4, r5
 80008b6:	10a4      	asrs	r4, r4, #2
 80008b8:	2600      	movs	r6, #0
 80008ba:	42a6      	cmp	r6, r4
 80008bc:	d105      	bne.n	80008ca <__libc_init_array+0x2e>
 80008be:	bd70      	pop	{r4, r5, r6, pc}
 80008c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c4:	4798      	blx	r3
 80008c6:	3601      	adds	r6, #1
 80008c8:	e7ee      	b.n	80008a8 <__libc_init_array+0xc>
 80008ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ce:	4798      	blx	r3
 80008d0:	3601      	adds	r6, #1
 80008d2:	e7f2      	b.n	80008ba <__libc_init_array+0x1e>
 80008d4:	0800137c 	.word	0x0800137c
 80008d8:	0800137c 	.word	0x0800137c
 80008dc:	0800137c 	.word	0x0800137c
 80008e0:	08001380 	.word	0x08001380

080008e4 <memset>:
 80008e4:	4402      	add	r2, r0
 80008e6:	4603      	mov	r3, r0
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d100      	bne.n	80008ee <memset+0xa>
 80008ec:	4770      	bx	lr
 80008ee:	f803 1b01 	strb.w	r1, [r3], #1
 80008f2:	e7f9      	b.n	80008e8 <memset+0x4>

080008f4 <_puts_r>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	460e      	mov	r6, r1
 80008f8:	4605      	mov	r5, r0
 80008fa:	b118      	cbz	r0, 8000904 <_puts_r+0x10>
 80008fc:	6983      	ldr	r3, [r0, #24]
 80008fe:	b90b      	cbnz	r3, 8000904 <_puts_r+0x10>
 8000900:	f000 fa48 	bl	8000d94 <__sinit>
 8000904:	69ab      	ldr	r3, [r5, #24]
 8000906:	68ac      	ldr	r4, [r5, #8]
 8000908:	b913      	cbnz	r3, 8000910 <_puts_r+0x1c>
 800090a:	4628      	mov	r0, r5
 800090c:	f000 fa42 	bl	8000d94 <__sinit>
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <_puts_r+0xd0>)
 8000912:	429c      	cmp	r4, r3
 8000914:	d120      	bne.n	8000958 <_puts_r+0x64>
 8000916:	686c      	ldr	r4, [r5, #4]
 8000918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800091a:	07db      	lsls	r3, r3, #31
 800091c:	d405      	bmi.n	800092a <_puts_r+0x36>
 800091e:	89a3      	ldrh	r3, [r4, #12]
 8000920:	0598      	lsls	r0, r3, #22
 8000922:	d402      	bmi.n	800092a <_puts_r+0x36>
 8000924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000926:	f000 fad3 	bl	8000ed0 <__retarget_lock_acquire_recursive>
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	0719      	lsls	r1, r3, #28
 800092e:	d51d      	bpl.n	800096c <_puts_r+0x78>
 8000930:	6923      	ldr	r3, [r4, #16]
 8000932:	b1db      	cbz	r3, 800096c <_puts_r+0x78>
 8000934:	3e01      	subs	r6, #1
 8000936:	68a3      	ldr	r3, [r4, #8]
 8000938:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800093c:	3b01      	subs	r3, #1
 800093e:	60a3      	str	r3, [r4, #8]
 8000940:	bb39      	cbnz	r1, 8000992 <_puts_r+0x9e>
 8000942:	2b00      	cmp	r3, #0
 8000944:	da38      	bge.n	80009b8 <_puts_r+0xc4>
 8000946:	4622      	mov	r2, r4
 8000948:	210a      	movs	r1, #10
 800094a:	4628      	mov	r0, r5
 800094c:	f000 f848 	bl	80009e0 <__swbuf_r>
 8000950:	3001      	adds	r0, #1
 8000952:	d011      	beq.n	8000978 <_puts_r+0x84>
 8000954:	250a      	movs	r5, #10
 8000956:	e011      	b.n	800097c <_puts_r+0x88>
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <_puts_r+0xd4>)
 800095a:	429c      	cmp	r4, r3
 800095c:	d101      	bne.n	8000962 <_puts_r+0x6e>
 800095e:	68ac      	ldr	r4, [r5, #8]
 8000960:	e7da      	b.n	8000918 <_puts_r+0x24>
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <_puts_r+0xd8>)
 8000964:	429c      	cmp	r4, r3
 8000966:	bf08      	it	eq
 8000968:	68ec      	ldreq	r4, [r5, #12]
 800096a:	e7d5      	b.n	8000918 <_puts_r+0x24>
 800096c:	4621      	mov	r1, r4
 800096e:	4628      	mov	r0, r5
 8000970:	f000 f888 	bl	8000a84 <__swsetup_r>
 8000974:	2800      	cmp	r0, #0
 8000976:	d0dd      	beq.n	8000934 <_puts_r+0x40>
 8000978:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800097c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800097e:	07da      	lsls	r2, r3, #31
 8000980:	d405      	bmi.n	800098e <_puts_r+0x9a>
 8000982:	89a3      	ldrh	r3, [r4, #12]
 8000984:	059b      	lsls	r3, r3, #22
 8000986:	d402      	bmi.n	800098e <_puts_r+0x9a>
 8000988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800098a:	f000 faa2 	bl	8000ed2 <__retarget_lock_release_recursive>
 800098e:	4628      	mov	r0, r5
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	2b00      	cmp	r3, #0
 8000994:	da04      	bge.n	80009a0 <_puts_r+0xac>
 8000996:	69a2      	ldr	r2, [r4, #24]
 8000998:	429a      	cmp	r2, r3
 800099a:	dc06      	bgt.n	80009aa <_puts_r+0xb6>
 800099c:	290a      	cmp	r1, #10
 800099e:	d004      	beq.n	80009aa <_puts_r+0xb6>
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	6022      	str	r2, [r4, #0]
 80009a6:	7019      	strb	r1, [r3, #0]
 80009a8:	e7c5      	b.n	8000936 <_puts_r+0x42>
 80009aa:	4622      	mov	r2, r4
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 f817 	bl	80009e0 <__swbuf_r>
 80009b2:	3001      	adds	r0, #1
 80009b4:	d1bf      	bne.n	8000936 <_puts_r+0x42>
 80009b6:	e7df      	b.n	8000978 <_puts_r+0x84>
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	250a      	movs	r5, #10
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	6022      	str	r2, [r4, #0]
 80009c0:	701d      	strb	r5, [r3, #0]
 80009c2:	e7db      	b.n	800097c <_puts_r+0x88>
 80009c4:	0800133c 	.word	0x0800133c
 80009c8:	0800135c 	.word	0x0800135c
 80009cc:	0800131c 	.word	0x0800131c

080009d0 <puts>:
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <puts+0xc>)
 80009d2:	4601      	mov	r1, r0
 80009d4:	6818      	ldr	r0, [r3, #0]
 80009d6:	f7ff bf8d 	b.w	80008f4 <_puts_r>
 80009da:	bf00      	nop
 80009dc:	20000000 	.word	0x20000000

080009e0 <__swbuf_r>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	460e      	mov	r6, r1
 80009e4:	4614      	mov	r4, r2
 80009e6:	4605      	mov	r5, r0
 80009e8:	b118      	cbz	r0, 80009f2 <__swbuf_r+0x12>
 80009ea:	6983      	ldr	r3, [r0, #24]
 80009ec:	b90b      	cbnz	r3, 80009f2 <__swbuf_r+0x12>
 80009ee:	f000 f9d1 	bl	8000d94 <__sinit>
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <__swbuf_r+0x98>)
 80009f4:	429c      	cmp	r4, r3
 80009f6:	d12b      	bne.n	8000a50 <__swbuf_r+0x70>
 80009f8:	686c      	ldr	r4, [r5, #4]
 80009fa:	69a3      	ldr	r3, [r4, #24]
 80009fc:	60a3      	str	r3, [r4, #8]
 80009fe:	89a3      	ldrh	r3, [r4, #12]
 8000a00:	071a      	lsls	r2, r3, #28
 8000a02:	d52f      	bpl.n	8000a64 <__swbuf_r+0x84>
 8000a04:	6923      	ldr	r3, [r4, #16]
 8000a06:	b36b      	cbz	r3, 8000a64 <__swbuf_r+0x84>
 8000a08:	6923      	ldr	r3, [r4, #16]
 8000a0a:	6820      	ldr	r0, [r4, #0]
 8000a0c:	1ac0      	subs	r0, r0, r3
 8000a0e:	6963      	ldr	r3, [r4, #20]
 8000a10:	b2f6      	uxtb	r6, r6
 8000a12:	4283      	cmp	r3, r0
 8000a14:	4637      	mov	r7, r6
 8000a16:	dc04      	bgt.n	8000a22 <__swbuf_r+0x42>
 8000a18:	4621      	mov	r1, r4
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 f926 	bl	8000c6c <_fflush_r>
 8000a20:	bb30      	cbnz	r0, 8000a70 <__swbuf_r+0x90>
 8000a22:	68a3      	ldr	r3, [r4, #8]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	60a3      	str	r3, [r4, #8]
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	6022      	str	r2, [r4, #0]
 8000a2e:	701e      	strb	r6, [r3, #0]
 8000a30:	6963      	ldr	r3, [r4, #20]
 8000a32:	3001      	adds	r0, #1
 8000a34:	4283      	cmp	r3, r0
 8000a36:	d004      	beq.n	8000a42 <__swbuf_r+0x62>
 8000a38:	89a3      	ldrh	r3, [r4, #12]
 8000a3a:	07db      	lsls	r3, r3, #31
 8000a3c:	d506      	bpl.n	8000a4c <__swbuf_r+0x6c>
 8000a3e:	2e0a      	cmp	r6, #10
 8000a40:	d104      	bne.n	8000a4c <__swbuf_r+0x6c>
 8000a42:	4621      	mov	r1, r4
 8000a44:	4628      	mov	r0, r5
 8000a46:	f000 f911 	bl	8000c6c <_fflush_r>
 8000a4a:	b988      	cbnz	r0, 8000a70 <__swbuf_r+0x90>
 8000a4c:	4638      	mov	r0, r7
 8000a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <__swbuf_r+0x9c>)
 8000a52:	429c      	cmp	r4, r3
 8000a54:	d101      	bne.n	8000a5a <__swbuf_r+0x7a>
 8000a56:	68ac      	ldr	r4, [r5, #8]
 8000a58:	e7cf      	b.n	80009fa <__swbuf_r+0x1a>
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <__swbuf_r+0xa0>)
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	bf08      	it	eq
 8000a60:	68ec      	ldreq	r4, [r5, #12]
 8000a62:	e7ca      	b.n	80009fa <__swbuf_r+0x1a>
 8000a64:	4621      	mov	r1, r4
 8000a66:	4628      	mov	r0, r5
 8000a68:	f000 f80c 	bl	8000a84 <__swsetup_r>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d0cb      	beq.n	8000a08 <__swbuf_r+0x28>
 8000a70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000a74:	e7ea      	b.n	8000a4c <__swbuf_r+0x6c>
 8000a76:	bf00      	nop
 8000a78:	0800133c 	.word	0x0800133c
 8000a7c:	0800135c 	.word	0x0800135c
 8000a80:	0800131c 	.word	0x0800131c

08000a84 <__swsetup_r>:
 8000a84:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <__swsetup_r+0xcc>)
 8000a86:	b570      	push	{r4, r5, r6, lr}
 8000a88:	681d      	ldr	r5, [r3, #0]
 8000a8a:	4606      	mov	r6, r0
 8000a8c:	460c      	mov	r4, r1
 8000a8e:	b125      	cbz	r5, 8000a9a <__swsetup_r+0x16>
 8000a90:	69ab      	ldr	r3, [r5, #24]
 8000a92:	b913      	cbnz	r3, 8000a9a <__swsetup_r+0x16>
 8000a94:	4628      	mov	r0, r5
 8000a96:	f000 f97d 	bl	8000d94 <__sinit>
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <__swsetup_r+0xd0>)
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	d10f      	bne.n	8000ac0 <__swsetup_r+0x3c>
 8000aa0:	686c      	ldr	r4, [r5, #4]
 8000aa2:	89a3      	ldrh	r3, [r4, #12]
 8000aa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000aa8:	0719      	lsls	r1, r3, #28
 8000aaa:	d42c      	bmi.n	8000b06 <__swsetup_r+0x82>
 8000aac:	06dd      	lsls	r5, r3, #27
 8000aae:	d411      	bmi.n	8000ad4 <__swsetup_r+0x50>
 8000ab0:	2309      	movs	r3, #9
 8000ab2:	6033      	str	r3, [r6, #0]
 8000ab4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ab8:	81a3      	strh	r3, [r4, #12]
 8000aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abe:	e03e      	b.n	8000b3e <__swsetup_r+0xba>
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <__swsetup_r+0xd4>)
 8000ac2:	429c      	cmp	r4, r3
 8000ac4:	d101      	bne.n	8000aca <__swsetup_r+0x46>
 8000ac6:	68ac      	ldr	r4, [r5, #8]
 8000ac8:	e7eb      	b.n	8000aa2 <__swsetup_r+0x1e>
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <__swsetup_r+0xd8>)
 8000acc:	429c      	cmp	r4, r3
 8000ace:	bf08      	it	eq
 8000ad0:	68ec      	ldreq	r4, [r5, #12]
 8000ad2:	e7e6      	b.n	8000aa2 <__swsetup_r+0x1e>
 8000ad4:	0758      	lsls	r0, r3, #29
 8000ad6:	d512      	bpl.n	8000afe <__swsetup_r+0x7a>
 8000ad8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ada:	b141      	cbz	r1, 8000aee <__swsetup_r+0x6a>
 8000adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ae0:	4299      	cmp	r1, r3
 8000ae2:	d002      	beq.n	8000aea <__swsetup_r+0x66>
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f000 fa5b 	bl	8000fa0 <_free_r>
 8000aea:	2300      	movs	r3, #0
 8000aec:	6363      	str	r3, [r4, #52]	; 0x34
 8000aee:	89a3      	ldrh	r3, [r4, #12]
 8000af0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000af4:	81a3      	strh	r3, [r4, #12]
 8000af6:	2300      	movs	r3, #0
 8000af8:	6063      	str	r3, [r4, #4]
 8000afa:	6923      	ldr	r3, [r4, #16]
 8000afc:	6023      	str	r3, [r4, #0]
 8000afe:	89a3      	ldrh	r3, [r4, #12]
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	81a3      	strh	r3, [r4, #12]
 8000b06:	6923      	ldr	r3, [r4, #16]
 8000b08:	b94b      	cbnz	r3, 8000b1e <__swsetup_r+0x9a>
 8000b0a:	89a3      	ldrh	r3, [r4, #12]
 8000b0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b14:	d003      	beq.n	8000b1e <__swsetup_r+0x9a>
 8000b16:	4621      	mov	r1, r4
 8000b18:	4630      	mov	r0, r6
 8000b1a:	f000 fa01 	bl	8000f20 <__smakebuf_r>
 8000b1e:	89a0      	ldrh	r0, [r4, #12]
 8000b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b24:	f010 0301 	ands.w	r3, r0, #1
 8000b28:	d00a      	beq.n	8000b40 <__swsetup_r+0xbc>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60a3      	str	r3, [r4, #8]
 8000b2e:	6963      	ldr	r3, [r4, #20]
 8000b30:	425b      	negs	r3, r3
 8000b32:	61a3      	str	r3, [r4, #24]
 8000b34:	6923      	ldr	r3, [r4, #16]
 8000b36:	b943      	cbnz	r3, 8000b4a <__swsetup_r+0xc6>
 8000b38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b3c:	d1ba      	bne.n	8000ab4 <__swsetup_r+0x30>
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	0781      	lsls	r1, r0, #30
 8000b42:	bf58      	it	pl
 8000b44:	6963      	ldrpl	r3, [r4, #20]
 8000b46:	60a3      	str	r3, [r4, #8]
 8000b48:	e7f4      	b.n	8000b34 <__swsetup_r+0xb0>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	e7f7      	b.n	8000b3e <__swsetup_r+0xba>
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000
 8000b54:	0800133c 	.word	0x0800133c
 8000b58:	0800135c 	.word	0x0800135c
 8000b5c:	0800131c 	.word	0x0800131c

08000b60 <__sflush_r>:
 8000b60:	898a      	ldrh	r2, [r1, #12]
 8000b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b66:	4605      	mov	r5, r0
 8000b68:	0710      	lsls	r0, r2, #28
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	d458      	bmi.n	8000c20 <__sflush_r+0xc0>
 8000b6e:	684b      	ldr	r3, [r1, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dc05      	bgt.n	8000b80 <__sflush_r+0x20>
 8000b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	dc02      	bgt.n	8000b80 <__sflush_r+0x20>
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d0f9      	beq.n	8000b7a <__sflush_r+0x1a>
 8000b86:	2300      	movs	r3, #0
 8000b88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b8c:	682f      	ldr	r7, [r5, #0]
 8000b8e:	602b      	str	r3, [r5, #0]
 8000b90:	d032      	beq.n	8000bf8 <__sflush_r+0x98>
 8000b92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b94:	89a3      	ldrh	r3, [r4, #12]
 8000b96:	075a      	lsls	r2, r3, #29
 8000b98:	d505      	bpl.n	8000ba6 <__sflush_r+0x46>
 8000b9a:	6863      	ldr	r3, [r4, #4]
 8000b9c:	1ac0      	subs	r0, r0, r3
 8000b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ba0:	b10b      	cbz	r3, 8000ba6 <__sflush_r+0x46>
 8000ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ba4:	1ac0      	subs	r0, r0, r3
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	4602      	mov	r2, r0
 8000baa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bac:	6a21      	ldr	r1, [r4, #32]
 8000bae:	4628      	mov	r0, r5
 8000bb0:	47b0      	blx	r6
 8000bb2:	1c43      	adds	r3, r0, #1
 8000bb4:	89a3      	ldrh	r3, [r4, #12]
 8000bb6:	d106      	bne.n	8000bc6 <__sflush_r+0x66>
 8000bb8:	6829      	ldr	r1, [r5, #0]
 8000bba:	291d      	cmp	r1, #29
 8000bbc:	d82c      	bhi.n	8000c18 <__sflush_r+0xb8>
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <__sflush_r+0x108>)
 8000bc0:	40ca      	lsrs	r2, r1
 8000bc2:	07d6      	lsls	r6, r2, #31
 8000bc4:	d528      	bpl.n	8000c18 <__sflush_r+0xb8>
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	6062      	str	r2, [r4, #4]
 8000bca:	04d9      	lsls	r1, r3, #19
 8000bcc:	6922      	ldr	r2, [r4, #16]
 8000bce:	6022      	str	r2, [r4, #0]
 8000bd0:	d504      	bpl.n	8000bdc <__sflush_r+0x7c>
 8000bd2:	1c42      	adds	r2, r0, #1
 8000bd4:	d101      	bne.n	8000bda <__sflush_r+0x7a>
 8000bd6:	682b      	ldr	r3, [r5, #0]
 8000bd8:	b903      	cbnz	r3, 8000bdc <__sflush_r+0x7c>
 8000bda:	6560      	str	r0, [r4, #84]	; 0x54
 8000bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bde:	602f      	str	r7, [r5, #0]
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d0ca      	beq.n	8000b7a <__sflush_r+0x1a>
 8000be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000be8:	4299      	cmp	r1, r3
 8000bea:	d002      	beq.n	8000bf2 <__sflush_r+0x92>
 8000bec:	4628      	mov	r0, r5
 8000bee:	f000 f9d7 	bl	8000fa0 <_free_r>
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8000bf6:	e7c1      	b.n	8000b7c <__sflush_r+0x1c>
 8000bf8:	6a21      	ldr	r1, [r4, #32]
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	47b0      	blx	r6
 8000c00:	1c41      	adds	r1, r0, #1
 8000c02:	d1c7      	bne.n	8000b94 <__sflush_r+0x34>
 8000c04:	682b      	ldr	r3, [r5, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0c4      	beq.n	8000b94 <__sflush_r+0x34>
 8000c0a:	2b1d      	cmp	r3, #29
 8000c0c:	d001      	beq.n	8000c12 <__sflush_r+0xb2>
 8000c0e:	2b16      	cmp	r3, #22
 8000c10:	d101      	bne.n	8000c16 <__sflush_r+0xb6>
 8000c12:	602f      	str	r7, [r5, #0]
 8000c14:	e7b1      	b.n	8000b7a <__sflush_r+0x1a>
 8000c16:	89a3      	ldrh	r3, [r4, #12]
 8000c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1c:	81a3      	strh	r3, [r4, #12]
 8000c1e:	e7ad      	b.n	8000b7c <__sflush_r+0x1c>
 8000c20:	690f      	ldr	r7, [r1, #16]
 8000c22:	2f00      	cmp	r7, #0
 8000c24:	d0a9      	beq.n	8000b7a <__sflush_r+0x1a>
 8000c26:	0793      	lsls	r3, r2, #30
 8000c28:	680e      	ldr	r6, [r1, #0]
 8000c2a:	bf08      	it	eq
 8000c2c:	694b      	ldreq	r3, [r1, #20]
 8000c2e:	600f      	str	r7, [r1, #0]
 8000c30:	bf18      	it	ne
 8000c32:	2300      	movne	r3, #0
 8000c34:	eba6 0807 	sub.w	r8, r6, r7
 8000c38:	608b      	str	r3, [r1, #8]
 8000c3a:	f1b8 0f00 	cmp.w	r8, #0
 8000c3e:	dd9c      	ble.n	8000b7a <__sflush_r+0x1a>
 8000c40:	6a21      	ldr	r1, [r4, #32]
 8000c42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000c44:	4643      	mov	r3, r8
 8000c46:	463a      	mov	r2, r7
 8000c48:	4628      	mov	r0, r5
 8000c4a:	47b0      	blx	r6
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	dc06      	bgt.n	8000c5e <__sflush_r+0xfe>
 8000c50:	89a3      	ldrh	r3, [r4, #12]
 8000c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c56:	81a3      	strh	r3, [r4, #12]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c5c:	e78e      	b.n	8000b7c <__sflush_r+0x1c>
 8000c5e:	4407      	add	r7, r0
 8000c60:	eba8 0800 	sub.w	r8, r8, r0
 8000c64:	e7e9      	b.n	8000c3a <__sflush_r+0xda>
 8000c66:	bf00      	nop
 8000c68:	20400001 	.word	0x20400001

08000c6c <_fflush_r>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	690b      	ldr	r3, [r1, #16]
 8000c70:	4605      	mov	r5, r0
 8000c72:	460c      	mov	r4, r1
 8000c74:	b913      	cbnz	r3, 8000c7c <_fflush_r+0x10>
 8000c76:	2500      	movs	r5, #0
 8000c78:	4628      	mov	r0, r5
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	b118      	cbz	r0, 8000c86 <_fflush_r+0x1a>
 8000c7e:	6983      	ldr	r3, [r0, #24]
 8000c80:	b90b      	cbnz	r3, 8000c86 <_fflush_r+0x1a>
 8000c82:	f000 f887 	bl	8000d94 <__sinit>
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <_fflush_r+0x6c>)
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	d11b      	bne.n	8000cc4 <_fflush_r+0x58>
 8000c8c:	686c      	ldr	r4, [r5, #4]
 8000c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0ef      	beq.n	8000c76 <_fflush_r+0xa>
 8000c96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c98:	07d0      	lsls	r0, r2, #31
 8000c9a:	d404      	bmi.n	8000ca6 <_fflush_r+0x3a>
 8000c9c:	0599      	lsls	r1, r3, #22
 8000c9e:	d402      	bmi.n	8000ca6 <_fflush_r+0x3a>
 8000ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ca2:	f000 f915 	bl	8000ed0 <__retarget_lock_acquire_recursive>
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	4621      	mov	r1, r4
 8000caa:	f7ff ff59 	bl	8000b60 <__sflush_r>
 8000cae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cb0:	07da      	lsls	r2, r3, #31
 8000cb2:	4605      	mov	r5, r0
 8000cb4:	d4e0      	bmi.n	8000c78 <_fflush_r+0xc>
 8000cb6:	89a3      	ldrh	r3, [r4, #12]
 8000cb8:	059b      	lsls	r3, r3, #22
 8000cba:	d4dd      	bmi.n	8000c78 <_fflush_r+0xc>
 8000cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cbe:	f000 f908 	bl	8000ed2 <__retarget_lock_release_recursive>
 8000cc2:	e7d9      	b.n	8000c78 <_fflush_r+0xc>
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <_fflush_r+0x70>)
 8000cc6:	429c      	cmp	r4, r3
 8000cc8:	d101      	bne.n	8000cce <_fflush_r+0x62>
 8000cca:	68ac      	ldr	r4, [r5, #8]
 8000ccc:	e7df      	b.n	8000c8e <_fflush_r+0x22>
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <_fflush_r+0x74>)
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	bf08      	it	eq
 8000cd4:	68ec      	ldreq	r4, [r5, #12]
 8000cd6:	e7da      	b.n	8000c8e <_fflush_r+0x22>
 8000cd8:	0800133c 	.word	0x0800133c
 8000cdc:	0800135c 	.word	0x0800135c
 8000ce0:	0800131c 	.word	0x0800131c

08000ce4 <std>:
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	b510      	push	{r4, lr}
 8000ce8:	4604      	mov	r4, r0
 8000cea:	e9c0 3300 	strd	r3, r3, [r0]
 8000cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cf2:	6083      	str	r3, [r0, #8]
 8000cf4:	8181      	strh	r1, [r0, #12]
 8000cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8000cf8:	81c2      	strh	r2, [r0, #14]
 8000cfa:	6183      	str	r3, [r0, #24]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2208      	movs	r2, #8
 8000d00:	305c      	adds	r0, #92	; 0x5c
 8000d02:	f7ff fdef 	bl	80008e4 <memset>
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <std+0x38>)
 8000d08:	6263      	str	r3, [r4, #36]	; 0x24
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <std+0x3c>)
 8000d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <std+0x40>)
 8000d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <std+0x44>)
 8000d14:	6224      	str	r4, [r4, #32]
 8000d16:	6323      	str	r3, [r4, #48]	; 0x30
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08001181 	.word	0x08001181
 8000d20:	080011a3 	.word	0x080011a3
 8000d24:	080011db 	.word	0x080011db
 8000d28:	080011ff 	.word	0x080011ff

08000d2c <_cleanup_r>:
 8000d2c:	4901      	ldr	r1, [pc, #4]	; (8000d34 <_cleanup_r+0x8>)
 8000d2e:	f000 b8af 	b.w	8000e90 <_fwalk_reent>
 8000d32:	bf00      	nop
 8000d34:	08000c6d 	.word	0x08000c6d

08000d38 <__sfmoreglue>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	2268      	movs	r2, #104	; 0x68
 8000d3c:	1e4d      	subs	r5, r1, #1
 8000d3e:	4355      	muls	r5, r2
 8000d40:	460e      	mov	r6, r1
 8000d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000d46:	f000 f997 	bl	8001078 <_malloc_r>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b140      	cbz	r0, 8000d60 <__sfmoreglue+0x28>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e9c0 1600 	strd	r1, r6, [r0]
 8000d54:	300c      	adds	r0, #12
 8000d56:	60a0      	str	r0, [r4, #8]
 8000d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000d5c:	f7ff fdc2 	bl	80008e4 <memset>
 8000d60:	4620      	mov	r0, r4
 8000d62:	bd70      	pop	{r4, r5, r6, pc}

08000d64 <__sfp_lock_acquire>:
 8000d64:	4801      	ldr	r0, [pc, #4]	; (8000d6c <__sfp_lock_acquire+0x8>)
 8000d66:	f000 b8b3 	b.w	8000ed0 <__retarget_lock_acquire_recursive>
 8000d6a:	bf00      	nop
 8000d6c:	20000085 	.word	0x20000085

08000d70 <__sfp_lock_release>:
 8000d70:	4801      	ldr	r0, [pc, #4]	; (8000d78 <__sfp_lock_release+0x8>)
 8000d72:	f000 b8ae 	b.w	8000ed2 <__retarget_lock_release_recursive>
 8000d76:	bf00      	nop
 8000d78:	20000085 	.word	0x20000085

08000d7c <__sinit_lock_acquire>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <__sinit_lock_acquire+0x8>)
 8000d7e:	f000 b8a7 	b.w	8000ed0 <__retarget_lock_acquire_recursive>
 8000d82:	bf00      	nop
 8000d84:	20000086 	.word	0x20000086

08000d88 <__sinit_lock_release>:
 8000d88:	4801      	ldr	r0, [pc, #4]	; (8000d90 <__sinit_lock_release+0x8>)
 8000d8a:	f000 b8a2 	b.w	8000ed2 <__retarget_lock_release_recursive>
 8000d8e:	bf00      	nop
 8000d90:	20000086 	.word	0x20000086

08000d94 <__sinit>:
 8000d94:	b510      	push	{r4, lr}
 8000d96:	4604      	mov	r4, r0
 8000d98:	f7ff fff0 	bl	8000d7c <__sinit_lock_acquire>
 8000d9c:	69a3      	ldr	r3, [r4, #24]
 8000d9e:	b11b      	cbz	r3, 8000da8 <__sinit+0x14>
 8000da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da4:	f7ff bff0 	b.w	8000d88 <__sinit_lock_release>
 8000da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000dac:	6523      	str	r3, [r4, #80]	; 0x50
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <__sinit+0x68>)
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <__sinit+0x6c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000db6:	42a3      	cmp	r3, r4
 8000db8:	bf04      	itt	eq
 8000dba:	2301      	moveq	r3, #1
 8000dbc:	61a3      	streq	r3, [r4, #24]
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f000 f820 	bl	8000e04 <__sfp>
 8000dc4:	6060      	str	r0, [r4, #4]
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f000 f81c 	bl	8000e04 <__sfp>
 8000dcc:	60a0      	str	r0, [r4, #8]
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f000 f818 	bl	8000e04 <__sfp>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60e0      	str	r0, [r4, #12]
 8000dd8:	2104      	movs	r1, #4
 8000dda:	6860      	ldr	r0, [r4, #4]
 8000ddc:	f7ff ff82 	bl	8000ce4 <std>
 8000de0:	68a0      	ldr	r0, [r4, #8]
 8000de2:	2201      	movs	r2, #1
 8000de4:	2109      	movs	r1, #9
 8000de6:	f7ff ff7d 	bl	8000ce4 <std>
 8000dea:	68e0      	ldr	r0, [r4, #12]
 8000dec:	2202      	movs	r2, #2
 8000dee:	2112      	movs	r1, #18
 8000df0:	f7ff ff78 	bl	8000ce4 <std>
 8000df4:	2301      	movs	r3, #1
 8000df6:	61a3      	str	r3, [r4, #24]
 8000df8:	e7d2      	b.n	8000da0 <__sinit+0xc>
 8000dfa:	bf00      	nop
 8000dfc:	08001318 	.word	0x08001318
 8000e00:	08000d2d 	.word	0x08000d2d

08000e04 <__sfp>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	4607      	mov	r7, r0
 8000e08:	f7ff ffac 	bl	8000d64 <__sfp_lock_acquire>
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <__sfp+0x84>)
 8000e0e:	681e      	ldr	r6, [r3, #0]
 8000e10:	69b3      	ldr	r3, [r6, #24]
 8000e12:	b913      	cbnz	r3, 8000e1a <__sfp+0x16>
 8000e14:	4630      	mov	r0, r6
 8000e16:	f7ff ffbd 	bl	8000d94 <__sinit>
 8000e1a:	3648      	adds	r6, #72	; 0x48
 8000e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	d503      	bpl.n	8000e2c <__sfp+0x28>
 8000e24:	6833      	ldr	r3, [r6, #0]
 8000e26:	b30b      	cbz	r3, 8000e6c <__sfp+0x68>
 8000e28:	6836      	ldr	r6, [r6, #0]
 8000e2a:	e7f7      	b.n	8000e1c <__sfp+0x18>
 8000e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e30:	b9d5      	cbnz	r5, 8000e68 <__sfp+0x64>
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <__sfp+0x88>)
 8000e34:	60e3      	str	r3, [r4, #12]
 8000e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8000e3c:	f000 f847 	bl	8000ece <__retarget_lock_init_recursive>
 8000e40:	f7ff ff96 	bl	8000d70 <__sfp_lock_release>
 8000e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e4c:	6025      	str	r5, [r4, #0]
 8000e4e:	61a5      	str	r5, [r4, #24]
 8000e50:	2208      	movs	r2, #8
 8000e52:	4629      	mov	r1, r5
 8000e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e58:	f7ff fd44 	bl	80008e4 <memset>
 8000e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000e64:	4620      	mov	r0, r4
 8000e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e68:	3468      	adds	r4, #104	; 0x68
 8000e6a:	e7d9      	b.n	8000e20 <__sfp+0x1c>
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4638      	mov	r0, r7
 8000e70:	f7ff ff62 	bl	8000d38 <__sfmoreglue>
 8000e74:	4604      	mov	r4, r0
 8000e76:	6030      	str	r0, [r6, #0]
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d1d5      	bne.n	8000e28 <__sfp+0x24>
 8000e7c:	f7ff ff78 	bl	8000d70 <__sfp_lock_release>
 8000e80:	230c      	movs	r3, #12
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	e7ee      	b.n	8000e64 <__sfp+0x60>
 8000e86:	bf00      	nop
 8000e88:	08001318 	.word	0x08001318
 8000e8c:	ffff0001 	.word	0xffff0001

08000e90 <_fwalk_reent>:
 8000e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e94:	4606      	mov	r6, r0
 8000e96:	4688      	mov	r8, r1
 8000e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e9c:	2700      	movs	r7, #0
 8000e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8000ea6:	d505      	bpl.n	8000eb4 <_fwalk_reent+0x24>
 8000ea8:	6824      	ldr	r4, [r4, #0]
 8000eaa:	2c00      	cmp	r4, #0
 8000eac:	d1f7      	bne.n	8000e9e <_fwalk_reent+0xe>
 8000eae:	4638      	mov	r0, r7
 8000eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eb4:	89ab      	ldrh	r3, [r5, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d907      	bls.n	8000eca <_fwalk_reent+0x3a>
 8000eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	d003      	beq.n	8000eca <_fwalk_reent+0x3a>
 8000ec2:	4629      	mov	r1, r5
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	47c0      	blx	r8
 8000ec8:	4307      	orrs	r7, r0
 8000eca:	3568      	adds	r5, #104	; 0x68
 8000ecc:	e7e9      	b.n	8000ea2 <_fwalk_reent+0x12>

08000ece <__retarget_lock_init_recursive>:
 8000ece:	4770      	bx	lr

08000ed0 <__retarget_lock_acquire_recursive>:
 8000ed0:	4770      	bx	lr

08000ed2 <__retarget_lock_release_recursive>:
 8000ed2:	4770      	bx	lr

08000ed4 <__swhatbuf_r>:
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	460e      	mov	r6, r1
 8000ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000edc:	2900      	cmp	r1, #0
 8000ede:	b096      	sub	sp, #88	; 0x58
 8000ee0:	4614      	mov	r4, r2
 8000ee2:	461d      	mov	r5, r3
 8000ee4:	da08      	bge.n	8000ef8 <__swhatbuf_r+0x24>
 8000ee6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000eea:	2200      	movs	r2, #0
 8000eec:	602a      	str	r2, [r5, #0]
 8000eee:	061a      	lsls	r2, r3, #24
 8000ef0:	d410      	bmi.n	8000f14 <__swhatbuf_r+0x40>
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	e00e      	b.n	8000f16 <__swhatbuf_r+0x42>
 8000ef8:	466a      	mov	r2, sp
 8000efa:	f000 f9a7 	bl	800124c <_fstat_r>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	dbf1      	blt.n	8000ee6 <__swhatbuf_r+0x12>
 8000f02:	9a01      	ldr	r2, [sp, #4]
 8000f04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000f08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000f0c:	425a      	negs	r2, r3
 8000f0e:	415a      	adcs	r2, r3
 8000f10:	602a      	str	r2, [r5, #0]
 8000f12:	e7ee      	b.n	8000ef2 <__swhatbuf_r+0x1e>
 8000f14:	2340      	movs	r3, #64	; 0x40
 8000f16:	2000      	movs	r0, #0
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	b016      	add	sp, #88	; 0x58
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f20 <__smakebuf_r>:
 8000f20:	898b      	ldrh	r3, [r1, #12]
 8000f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f24:	079d      	lsls	r5, r3, #30
 8000f26:	4606      	mov	r6, r0
 8000f28:	460c      	mov	r4, r1
 8000f2a:	d507      	bpl.n	8000f3c <__smakebuf_r+0x1c>
 8000f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f30:	6023      	str	r3, [r4, #0]
 8000f32:	6123      	str	r3, [r4, #16]
 8000f34:	2301      	movs	r3, #1
 8000f36:	6163      	str	r3, [r4, #20]
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
 8000f3c:	ab01      	add	r3, sp, #4
 8000f3e:	466a      	mov	r2, sp
 8000f40:	f7ff ffc8 	bl	8000ed4 <__swhatbuf_r>
 8000f44:	9900      	ldr	r1, [sp, #0]
 8000f46:	4605      	mov	r5, r0
 8000f48:	4630      	mov	r0, r6
 8000f4a:	f000 f895 	bl	8001078 <_malloc_r>
 8000f4e:	b948      	cbnz	r0, 8000f64 <__smakebuf_r+0x44>
 8000f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f54:	059a      	lsls	r2, r3, #22
 8000f56:	d4ef      	bmi.n	8000f38 <__smakebuf_r+0x18>
 8000f58:	f023 0303 	bic.w	r3, r3, #3
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	81a3      	strh	r3, [r4, #12]
 8000f62:	e7e3      	b.n	8000f2c <__smakebuf_r+0xc>
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <__smakebuf_r+0x7c>)
 8000f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	6020      	str	r0, [r4, #0]
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	81a3      	strh	r3, [r4, #12]
 8000f72:	9b00      	ldr	r3, [sp, #0]
 8000f74:	6163      	str	r3, [r4, #20]
 8000f76:	9b01      	ldr	r3, [sp, #4]
 8000f78:	6120      	str	r0, [r4, #16]
 8000f7a:	b15b      	cbz	r3, 8000f94 <__smakebuf_r+0x74>
 8000f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f80:	4630      	mov	r0, r6
 8000f82:	f000 f975 	bl	8001270 <_isatty_r>
 8000f86:	b128      	cbz	r0, 8000f94 <__smakebuf_r+0x74>
 8000f88:	89a3      	ldrh	r3, [r4, #12]
 8000f8a:	f023 0303 	bic.w	r3, r3, #3
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	81a3      	strh	r3, [r4, #12]
 8000f94:	89a0      	ldrh	r0, [r4, #12]
 8000f96:	4305      	orrs	r5, r0
 8000f98:	81a5      	strh	r5, [r4, #12]
 8000f9a:	e7cd      	b.n	8000f38 <__smakebuf_r+0x18>
 8000f9c:	08000d2d 	.word	0x08000d2d

08000fa0 <_free_r>:
 8000fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fa2:	2900      	cmp	r1, #0
 8000fa4:	d044      	beq.n	8001030 <_free_r+0x90>
 8000fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000faa:	9001      	str	r0, [sp, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f1a1 0404 	sub.w	r4, r1, #4
 8000fb2:	bfb8      	it	lt
 8000fb4:	18e4      	addlt	r4, r4, r3
 8000fb6:	f000 f97d 	bl	80012b4 <__malloc_lock>
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <_free_r+0x94>)
 8000fbc:	9801      	ldr	r0, [sp, #4]
 8000fbe:	6813      	ldr	r3, [r2, #0]
 8000fc0:	b933      	cbnz	r3, 8000fd0 <_free_r+0x30>
 8000fc2:	6063      	str	r3, [r4, #4]
 8000fc4:	6014      	str	r4, [r2, #0]
 8000fc6:	b003      	add	sp, #12
 8000fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fcc:	f000 b978 	b.w	80012c0 <__malloc_unlock>
 8000fd0:	42a3      	cmp	r3, r4
 8000fd2:	d908      	bls.n	8000fe6 <_free_r+0x46>
 8000fd4:	6825      	ldr	r5, [r4, #0]
 8000fd6:	1961      	adds	r1, r4, r5
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	bf01      	itttt	eq
 8000fdc:	6819      	ldreq	r1, [r3, #0]
 8000fde:	685b      	ldreq	r3, [r3, #4]
 8000fe0:	1949      	addeq	r1, r1, r5
 8000fe2:	6021      	streq	r1, [r4, #0]
 8000fe4:	e7ed      	b.n	8000fc2 <_free_r+0x22>
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	b10b      	cbz	r3, 8000ff0 <_free_r+0x50>
 8000fec:	42a3      	cmp	r3, r4
 8000fee:	d9fa      	bls.n	8000fe6 <_free_r+0x46>
 8000ff0:	6811      	ldr	r1, [r2, #0]
 8000ff2:	1855      	adds	r5, r2, r1
 8000ff4:	42a5      	cmp	r5, r4
 8000ff6:	d10b      	bne.n	8001010 <_free_r+0x70>
 8000ff8:	6824      	ldr	r4, [r4, #0]
 8000ffa:	4421      	add	r1, r4
 8000ffc:	1854      	adds	r4, r2, r1
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	6011      	str	r1, [r2, #0]
 8001002:	d1e0      	bne.n	8000fc6 <_free_r+0x26>
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	6053      	str	r3, [r2, #4]
 800100a:	4421      	add	r1, r4
 800100c:	6011      	str	r1, [r2, #0]
 800100e:	e7da      	b.n	8000fc6 <_free_r+0x26>
 8001010:	d902      	bls.n	8001018 <_free_r+0x78>
 8001012:	230c      	movs	r3, #12
 8001014:	6003      	str	r3, [r0, #0]
 8001016:	e7d6      	b.n	8000fc6 <_free_r+0x26>
 8001018:	6825      	ldr	r5, [r4, #0]
 800101a:	1961      	adds	r1, r4, r5
 800101c:	428b      	cmp	r3, r1
 800101e:	bf04      	itt	eq
 8001020:	6819      	ldreq	r1, [r3, #0]
 8001022:	685b      	ldreq	r3, [r3, #4]
 8001024:	6063      	str	r3, [r4, #4]
 8001026:	bf04      	itt	eq
 8001028:	1949      	addeq	r1, r1, r5
 800102a:	6021      	streq	r1, [r4, #0]
 800102c:	6054      	str	r4, [r2, #4]
 800102e:	e7ca      	b.n	8000fc6 <_free_r+0x26>
 8001030:	b003      	add	sp, #12
 8001032:	bd30      	pop	{r4, r5, pc}
 8001034:	20000088 	.word	0x20000088

08001038 <sbrk_aligned>:
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	4e0e      	ldr	r6, [pc, #56]	; (8001074 <sbrk_aligned+0x3c>)
 800103c:	460c      	mov	r4, r1
 800103e:	6831      	ldr	r1, [r6, #0]
 8001040:	4605      	mov	r5, r0
 8001042:	b911      	cbnz	r1, 800104a <sbrk_aligned+0x12>
 8001044:	f000 f88c 	bl	8001160 <_sbrk_r>
 8001048:	6030      	str	r0, [r6, #0]
 800104a:	4621      	mov	r1, r4
 800104c:	4628      	mov	r0, r5
 800104e:	f000 f887 	bl	8001160 <_sbrk_r>
 8001052:	1c43      	adds	r3, r0, #1
 8001054:	d00a      	beq.n	800106c <sbrk_aligned+0x34>
 8001056:	1cc4      	adds	r4, r0, #3
 8001058:	f024 0403 	bic.w	r4, r4, #3
 800105c:	42a0      	cmp	r0, r4
 800105e:	d007      	beq.n	8001070 <sbrk_aligned+0x38>
 8001060:	1a21      	subs	r1, r4, r0
 8001062:	4628      	mov	r0, r5
 8001064:	f000 f87c 	bl	8001160 <_sbrk_r>
 8001068:	3001      	adds	r0, #1
 800106a:	d101      	bne.n	8001070 <sbrk_aligned+0x38>
 800106c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001070:	4620      	mov	r0, r4
 8001072:	bd70      	pop	{r4, r5, r6, pc}
 8001074:	2000008c 	.word	0x2000008c

08001078 <_malloc_r>:
 8001078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800107c:	1ccd      	adds	r5, r1, #3
 800107e:	f025 0503 	bic.w	r5, r5, #3
 8001082:	3508      	adds	r5, #8
 8001084:	2d0c      	cmp	r5, #12
 8001086:	bf38      	it	cc
 8001088:	250c      	movcc	r5, #12
 800108a:	2d00      	cmp	r5, #0
 800108c:	4607      	mov	r7, r0
 800108e:	db01      	blt.n	8001094 <_malloc_r+0x1c>
 8001090:	42a9      	cmp	r1, r5
 8001092:	d905      	bls.n	80010a0 <_malloc_r+0x28>
 8001094:	230c      	movs	r3, #12
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	2600      	movs	r6, #0
 800109a:	4630      	mov	r0, r6
 800109c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a0:	4e2e      	ldr	r6, [pc, #184]	; (800115c <_malloc_r+0xe4>)
 80010a2:	f000 f907 	bl	80012b4 <__malloc_lock>
 80010a6:	6833      	ldr	r3, [r6, #0]
 80010a8:	461c      	mov	r4, r3
 80010aa:	bb34      	cbnz	r4, 80010fa <_malloc_r+0x82>
 80010ac:	4629      	mov	r1, r5
 80010ae:	4638      	mov	r0, r7
 80010b0:	f7ff ffc2 	bl	8001038 <sbrk_aligned>
 80010b4:	1c43      	adds	r3, r0, #1
 80010b6:	4604      	mov	r4, r0
 80010b8:	d14d      	bne.n	8001156 <_malloc_r+0xde>
 80010ba:	6834      	ldr	r4, [r6, #0]
 80010bc:	4626      	mov	r6, r4
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d140      	bne.n	8001144 <_malloc_r+0xcc>
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	4631      	mov	r1, r6
 80010c6:	4638      	mov	r0, r7
 80010c8:	eb04 0803 	add.w	r8, r4, r3
 80010cc:	f000 f848 	bl	8001160 <_sbrk_r>
 80010d0:	4580      	cmp	r8, r0
 80010d2:	d13a      	bne.n	800114a <_malloc_r+0xd2>
 80010d4:	6821      	ldr	r1, [r4, #0]
 80010d6:	3503      	adds	r5, #3
 80010d8:	1a6d      	subs	r5, r5, r1
 80010da:	f025 0503 	bic.w	r5, r5, #3
 80010de:	3508      	adds	r5, #8
 80010e0:	2d0c      	cmp	r5, #12
 80010e2:	bf38      	it	cc
 80010e4:	250c      	movcc	r5, #12
 80010e6:	4629      	mov	r1, r5
 80010e8:	4638      	mov	r0, r7
 80010ea:	f7ff ffa5 	bl	8001038 <sbrk_aligned>
 80010ee:	3001      	adds	r0, #1
 80010f0:	d02b      	beq.n	800114a <_malloc_r+0xd2>
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	442b      	add	r3, r5
 80010f6:	6023      	str	r3, [r4, #0]
 80010f8:	e00e      	b.n	8001118 <_malloc_r+0xa0>
 80010fa:	6822      	ldr	r2, [r4, #0]
 80010fc:	1b52      	subs	r2, r2, r5
 80010fe:	d41e      	bmi.n	800113e <_malloc_r+0xc6>
 8001100:	2a0b      	cmp	r2, #11
 8001102:	d916      	bls.n	8001132 <_malloc_r+0xba>
 8001104:	1961      	adds	r1, r4, r5
 8001106:	42a3      	cmp	r3, r4
 8001108:	6025      	str	r5, [r4, #0]
 800110a:	bf18      	it	ne
 800110c:	6059      	strne	r1, [r3, #4]
 800110e:	6863      	ldr	r3, [r4, #4]
 8001110:	bf08      	it	eq
 8001112:	6031      	streq	r1, [r6, #0]
 8001114:	5162      	str	r2, [r4, r5]
 8001116:	604b      	str	r3, [r1, #4]
 8001118:	4638      	mov	r0, r7
 800111a:	f104 060b 	add.w	r6, r4, #11
 800111e:	f000 f8cf 	bl	80012c0 <__malloc_unlock>
 8001122:	f026 0607 	bic.w	r6, r6, #7
 8001126:	1d23      	adds	r3, r4, #4
 8001128:	1af2      	subs	r2, r6, r3
 800112a:	d0b6      	beq.n	800109a <_malloc_r+0x22>
 800112c:	1b9b      	subs	r3, r3, r6
 800112e:	50a3      	str	r3, [r4, r2]
 8001130:	e7b3      	b.n	800109a <_malloc_r+0x22>
 8001132:	6862      	ldr	r2, [r4, #4]
 8001134:	42a3      	cmp	r3, r4
 8001136:	bf0c      	ite	eq
 8001138:	6032      	streq	r2, [r6, #0]
 800113a:	605a      	strne	r2, [r3, #4]
 800113c:	e7ec      	b.n	8001118 <_malloc_r+0xa0>
 800113e:	4623      	mov	r3, r4
 8001140:	6864      	ldr	r4, [r4, #4]
 8001142:	e7b2      	b.n	80010aa <_malloc_r+0x32>
 8001144:	4634      	mov	r4, r6
 8001146:	6876      	ldr	r6, [r6, #4]
 8001148:	e7b9      	b.n	80010be <_malloc_r+0x46>
 800114a:	230c      	movs	r3, #12
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4638      	mov	r0, r7
 8001150:	f000 f8b6 	bl	80012c0 <__malloc_unlock>
 8001154:	e7a1      	b.n	800109a <_malloc_r+0x22>
 8001156:	6025      	str	r5, [r4, #0]
 8001158:	e7de      	b.n	8001118 <_malloc_r+0xa0>
 800115a:	bf00      	nop
 800115c:	20000088 	.word	0x20000088

08001160 <_sbrk_r>:
 8001160:	b538      	push	{r3, r4, r5, lr}
 8001162:	4d06      	ldr	r5, [pc, #24]	; (800117c <_sbrk_r+0x1c>)
 8001164:	2300      	movs	r3, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	602b      	str	r3, [r5, #0]
 800116c:	f7ff f92e 	bl	80003cc <_sbrk>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_sbrk_r+0x1a>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	b103      	cbz	r3, 800117a <_sbrk_r+0x1a>
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	20000090 	.word	0x20000090

08001180 <__sread>:
 8001180:	b510      	push	{r4, lr}
 8001182:	460c      	mov	r4, r1
 8001184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001188:	f000 f8a0 	bl	80012cc <_read_r>
 800118c:	2800      	cmp	r0, #0
 800118e:	bfab      	itete	ge
 8001190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001192:	89a3      	ldrhlt	r3, [r4, #12]
 8001194:	181b      	addge	r3, r3, r0
 8001196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800119a:	bfac      	ite	ge
 800119c:	6563      	strge	r3, [r4, #84]	; 0x54
 800119e:	81a3      	strhlt	r3, [r4, #12]
 80011a0:	bd10      	pop	{r4, pc}

080011a2 <__swrite>:
 80011a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a6:	461f      	mov	r7, r3
 80011a8:	898b      	ldrh	r3, [r1, #12]
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	4605      	mov	r5, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	4616      	mov	r6, r2
 80011b2:	d505      	bpl.n	80011c0 <__swrite+0x1e>
 80011b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b8:	2302      	movs	r3, #2
 80011ba:	2200      	movs	r2, #0
 80011bc:	f000 f868 	bl	8001290 <_lseek_r>
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011ca:	81a3      	strh	r3, [r4, #12]
 80011cc:	4632      	mov	r2, r6
 80011ce:	463b      	mov	r3, r7
 80011d0:	4628      	mov	r0, r5
 80011d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011d6:	f000 b817 	b.w	8001208 <_write_r>

080011da <__sseek>:
 80011da:	b510      	push	{r4, lr}
 80011dc:	460c      	mov	r4, r1
 80011de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e2:	f000 f855 	bl	8001290 <_lseek_r>
 80011e6:	1c43      	adds	r3, r0, #1
 80011e8:	89a3      	ldrh	r3, [r4, #12]
 80011ea:	bf15      	itete	ne
 80011ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80011ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011f6:	81a3      	strheq	r3, [r4, #12]
 80011f8:	bf18      	it	ne
 80011fa:	81a3      	strhne	r3, [r4, #12]
 80011fc:	bd10      	pop	{r4, pc}

080011fe <__sclose>:
 80011fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001202:	f000 b813 	b.w	800122c <_close_r>
	...

08001208 <_write_r>:
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4d07      	ldr	r5, [pc, #28]	; (8001228 <_write_r+0x20>)
 800120c:	4604      	mov	r4, r0
 800120e:	4608      	mov	r0, r1
 8001210:	4611      	mov	r1, r2
 8001212:	2200      	movs	r2, #0
 8001214:	602a      	str	r2, [r5, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	f7ff f887 	bl	800032a <_write>
 800121c:	1c43      	adds	r3, r0, #1
 800121e:	d102      	bne.n	8001226 <_write_r+0x1e>
 8001220:	682b      	ldr	r3, [r5, #0]
 8001222:	b103      	cbz	r3, 8001226 <_write_r+0x1e>
 8001224:	6023      	str	r3, [r4, #0]
 8001226:	bd38      	pop	{r3, r4, r5, pc}
 8001228:	20000090 	.word	0x20000090

0800122c <_close_r>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	4d06      	ldr	r5, [pc, #24]	; (8001248 <_close_r+0x1c>)
 8001230:	2300      	movs	r3, #0
 8001232:	4604      	mov	r4, r0
 8001234:	4608      	mov	r0, r1
 8001236:	602b      	str	r3, [r5, #0]
 8001238:	f7ff f893 	bl	8000362 <_close>
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	d102      	bne.n	8001246 <_close_r+0x1a>
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	b103      	cbz	r3, 8001246 <_close_r+0x1a>
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	bd38      	pop	{r3, r4, r5, pc}
 8001248:	20000090 	.word	0x20000090

0800124c <_fstat_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4d07      	ldr	r5, [pc, #28]	; (800126c <_fstat_r+0x20>)
 8001250:	2300      	movs	r3, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	602b      	str	r3, [r5, #0]
 800125a:	f7ff f88e 	bl	800037a <_fstat>
 800125e:	1c43      	adds	r3, r0, #1
 8001260:	d102      	bne.n	8001268 <_fstat_r+0x1c>
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	b103      	cbz	r3, 8001268 <_fstat_r+0x1c>
 8001266:	6023      	str	r3, [r4, #0]
 8001268:	bd38      	pop	{r3, r4, r5, pc}
 800126a:	bf00      	nop
 800126c:	20000090 	.word	0x20000090

08001270 <_isatty_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4d06      	ldr	r5, [pc, #24]	; (800128c <_isatty_r+0x1c>)
 8001274:	2300      	movs	r3, #0
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	602b      	str	r3, [r5, #0]
 800127c:	f7ff f88d 	bl	800039a <_isatty>
 8001280:	1c43      	adds	r3, r0, #1
 8001282:	d102      	bne.n	800128a <_isatty_r+0x1a>
 8001284:	682b      	ldr	r3, [r5, #0]
 8001286:	b103      	cbz	r3, 800128a <_isatty_r+0x1a>
 8001288:	6023      	str	r3, [r4, #0]
 800128a:	bd38      	pop	{r3, r4, r5, pc}
 800128c:	20000090 	.word	0x20000090

08001290 <_lseek_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d07      	ldr	r5, [pc, #28]	; (80012b0 <_lseek_r+0x20>)
 8001294:	4604      	mov	r4, r0
 8001296:	4608      	mov	r0, r1
 8001298:	4611      	mov	r1, r2
 800129a:	2200      	movs	r2, #0
 800129c:	602a      	str	r2, [r5, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	f7ff f886 	bl	80003b0 <_lseek>
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	d102      	bne.n	80012ae <_lseek_r+0x1e>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	b103      	cbz	r3, 80012ae <_lseek_r+0x1e>
 80012ac:	6023      	str	r3, [r4, #0]
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
 80012b0:	20000090 	.word	0x20000090

080012b4 <__malloc_lock>:
 80012b4:	4801      	ldr	r0, [pc, #4]	; (80012bc <__malloc_lock+0x8>)
 80012b6:	f7ff be0b 	b.w	8000ed0 <__retarget_lock_acquire_recursive>
 80012ba:	bf00      	nop
 80012bc:	20000084 	.word	0x20000084

080012c0 <__malloc_unlock>:
 80012c0:	4801      	ldr	r0, [pc, #4]	; (80012c8 <__malloc_unlock+0x8>)
 80012c2:	f7ff be06 	b.w	8000ed2 <__retarget_lock_release_recursive>
 80012c6:	bf00      	nop
 80012c8:	20000084 	.word	0x20000084

080012cc <_read_r>:
 80012cc:	b538      	push	{r3, r4, r5, lr}
 80012ce:	4d07      	ldr	r5, [pc, #28]	; (80012ec <_read_r+0x20>)
 80012d0:	4604      	mov	r4, r0
 80012d2:	4608      	mov	r0, r1
 80012d4:	4611      	mov	r1, r2
 80012d6:	2200      	movs	r2, #0
 80012d8:	602a      	str	r2, [r5, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	f7ff f808 	bl	80002f0 <_read>
 80012e0:	1c43      	adds	r3, r0, #1
 80012e2:	d102      	bne.n	80012ea <_read_r+0x1e>
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	b103      	cbz	r3, 80012ea <_read_r+0x1e>
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
 80012ec:	20000090 	.word	0x20000090

080012f0 <_init>:
 80012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f2:	bf00      	nop
 80012f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012f6:	bc08      	pop	{r3}
 80012f8:	469e      	mov	lr, r3
 80012fa:	4770      	bx	lr

080012fc <_fini>:
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	bf00      	nop
 8001300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001302:	bc08      	pop	{r3}
 8001304:	469e      	mov	lr, r3
 8001306:	4770      	bx	lr
